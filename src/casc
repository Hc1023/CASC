#!/usr/bin/perl -w

# MANUAL FOR casc

=pod

=head1 NAME

casc -- casc aint simply crt, crispr finding program

=head1 SYNOPSIS

 casc --in /Path/to/infile.fasta --outdir /Path/to/output_dir/ --ncpus 1 [--conservative]
                     [--version] [--debug] [--help] [--manual]

=head1 DESCRIPTION

 CASC is a program that detects and validates CRISPR repeat-spacer arrays from
 metagenomic / genomic sequences (long reads or contigs).                                                                                                                                                       
 CASC will find CRISPR repeat-spacer arrays by using the CRT, and then validate
 the putative repeat-spacer array using a few heuristics. Further details
 are available in the (nearly complete) manuscript.
 
=head1 OPTIONS

=over 3

=item B<-i, --in>=FILENAME

Input file in FASTA format. (Required) 

=item B<-o, --outdir>=DIR

Output directory containing your results. (Required) 

=item B<-n, --ncpus>=INT

Number of CPUs to use. Default = 1 (Optional)

=item B<-c, --conservative>

Be conservative with spacer calls. (Optional)
By default CASC is liberal with calls.

=item B<-v, --version>

Displays the version. (Optional)

=item B<-d, --debug>

Run in debug mode and do not remove the component_process files. (Optional)
Note, if component process files are not removed they will eat up disk space.

=item B<-h, --help>

Displays the usage message.  (Optional) 

=item B<-m, --manual>

Displays full manual.  (Optional) 

=back

=head1 DEPENDENCIES

Requires the following Perl libraries:

CASC::Reporting
CASC::Utilities
CASC::System
CASC::QC
threads

=head1 AUTHOR

Written by Daniel Nasko, 
Center for Bioinformatics and Computational Biology, University of Delaware.

=head1 REPORTING BUGS

Report bugs to dnasko@udel.edu

=head1 COPYRIGHT

Copyright 2017 Daniel Nasko.  
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.  
This is free software: you are free to change and redistribute it.  
There is NO WARRANTY, to the extent permitted by law.  

Please acknowledge author and affiliation in published work arising from this script's 
usage <http://bioinformatics.udel.edu/Core/Acknowledge>.

=cut


use strict;
use Getopt::Long;
use File::Basename;
use Pod::Usage;

use Cwd 'abs_path';
use threads;
use CASC::Reporting qw(:Both);
use CASC::Utilities qw(:Both);
use CASC::System qw(:Both);
use CASC::QC qw(:Both);
my $version = 2.6;

#ARGUMENTS WITH NO DEFAULT
my($infile,$outdir,$conservative,$ver_request,$debug,$help,$manual);
##ARGUMENTS WITH DEFAULT
my $ncpus=1;
my $calling = "liberal";

GetOptions (	
				"i|in=s"	 =>	\$infile,
                                "o|outdir=s"	 =>	\$outdir,
                                "n|ncpus=i"      =>     \$ncpus,
                                "c|conservative" =>     \$conservative,
                                "d|debug"        =>     \$debug,
                                "v|version"      =>     \$ver_request,
				"h|help"	 =>	\$help,
				"m|manual"	 =>	\$manual);

# VALIDATE ARGS
if ($ver_request) { version_info($version); }
pod2usage(-verbose => 2)  if ($manual);
pod2usage( {-exitval => 0, -verbose => 2, -output => \*STDERR} )  if ($help);
pod2usage( -msg  => "\n\n ERROR!  Required argument --in not found.\n\n", -exitval => 2, -verbose => 1)  if (! $infile );
pod2usage( -msg  => "\n\n ERROR!  Required argument --outdir not found.\n\n", -exitval => 2, -verbose => 1)  if (! $outdir);
if ($conservative) { $calling = "conservative"; }

## Global Variables
my $UniRefDB = "UniRef_Cas_29Sep2015";    ## UniRef DB Version
my $RepeatDB = "RepeatDB_07Oct2014";      ## CRISPR DB Version

## Check that BLASTn/x are installed and in PATH
blast_check();

## Check that CASC scripts are installed and in PATH
my @casc_scripts = ('CRT', 'para_blastn.pl', 'para_blastx.pl', 'casc_report_gen.pl', 'splitFASTA.pl');
foreach my $script (@casc_scripts) { script_check($script); }

## Check that the input FASTA is a Nucleotide FASTA
check_fasta($infile);
my ($number_of_seqs, $number_of_bases) = count_seqs($infile);
$ncpus = check_threads($number_of_seqs, $ncpus);

## Setup the output working area
initialize_outdir_tree($outdir);
my $user_input = $0 . " -i " . abs_path($infile) ." -o " . abs_path($outdir) . " -n $ncpus";
if ($conservative) { $user_input = $user_input . " --conservative"; }
if ($debug) { $user_input = $user_input . " --debug"; }
report('start',$outdir, $user_input);

## Split the FASTA up
report('split_fasta',$outdir);
my @Files = split_multifasta($number_of_seqs, $ncpus, $infile, "$outdir/component_processes/split_multifasta");
report('done', $outdir);

## Run mCRT to call putative spacers
report('mCRT', $outdir);
my $putative_spacers = run_mCRT(\@Files, $outdir, get_basename($infile));
report('done', $outdir);
if ($putative_spacers == 0) {
    unless($debug) { clean_up($outdir);}
    report('no_spacers', $outdir);
}

## Extract the sequences contianing putative spacers
report('extraction', $outdir);
my %SpacerContainingSeqs = extract_headers("$outdir/component_processes/mCRT/" . get_basename($infile) . ".spacer.fsa");
extract_seqs($infile,"$outdir/component_processes/extract_sequence/spacer_containing_seqs.fasta",%SpacerContainingSeqs);
report('done', $outdir);

## Check the number of sequences we have extracted
my ($input_number_of_seqs, $input_number_of_bases) = ($number_of_seqs, $number_of_bases);
($number_of_seqs, $number_of_bases) = count_seqs("$outdir/component_processes/extract_sequence/spacer_containing_seqs.fasta");
$ncpus = check_threads($number_of_seqs, $ncpus);

## Repeat BLASTn
report('blastn', $outdir);
my $blastn_string = "para_blastn.pl " .
    "-q $outdir/component_processes/mCRT/" . get_basename($infile) . ".repeat.fsa " .
    "-d $RepeatDB " .
    "-o $outdir/component_processes/blastn/" . get_basename($infile) . ".btab " .
    " -e 1e-5 -t $ncpus > $outdir/component_processes/blastn/para_blastn.log 2>&1";
print `$blastn_string`;
btab2lookup("$outdir/component_processes/blastn/" . get_basename($infile) . ".btab", "$outdir/component_processes/bonafide_lookup/" . get_basename($infile) . ".repeat.lookup");
report('done', $outdir);

## Cas BLASTx
report('blastx', $outdir);
my $blastx_string = "para_blastx.pl " .
    "-q $outdir/component_processes/extract_sequence/spacer_containing_seqs.fasta " .
    "-d $UniRefDB " .
    "-o $outdir/component_processes/blastx/" . get_basename($infile) . ".btab " .
    " -e 1e-12 -t $ncpus > $outdir/component_processes/blastx/para_blastx.log 2>&1";
print `$blastx_string`;
btab2lookup("$outdir/component_processes/blastx/" . get_basename($infile) . ".btab", "$outdir/component_processes/bonafide_lookup/" . get_basename($infile) . ".cas.lookup");
report('done', $outdir);

## Gather and print results
report('reporting', $outdir);
my $report_exe = "casc_report_gen.pl -x " . "$outdir/component_processes/bonafide_lookup/" . get_basename($infile) . ".cas.lookup" 
    . " -n " . "$outdir/component_processes/bonafide_lookup/" . get_basename($infile) . ".repeat.lookup" 
    . " -c " . "$outdir/component_processes/mCRT/" . get_basename($infile) . ".raw " 
    . " -s " . "$outdir/component_processes/mCRT/" . get_basename($infile) . ".spacer.fsa " 
    . " -r " . "$outdir/component_processes/mCRT/" . get_basename($infile) . ".repeat.fsa "
    . "-o $outdir -i $infile --stats=\"$input_number_of_bases,$input_number_of_seqs\"";
if ($conservative) {$report_exe = $report_exe . " --conservative"}
print `$report_exe`;
report('done', $outdir);

## All Done Everything
report('all_done', $outdir);
unless($debug) { clean_up($outdir);}

exit 0;
